// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebThuCung.Data;

#nullable disable

namespace WebThuCung.Migrations
{
    [DbContext(typeof(PetContext))]
    partial class PetContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("WebThuCung.Models.Admin", b =>
                {
                    b.Property<string>("idAdmin")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Avatar")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<string>("idRole")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("passwordAdmin")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("userAdmin")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("idAdmin");

                    b.HasIndex("idRole");

                    b.ToTable("Admin");
                });

            modelBuilder.Entity("WebThuCung.Models.Branch", b =>
                {
                    b.Property<string>("idBranch")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Logo")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("nameBranch")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("idBranch");

                    b.ToTable("Branch");
                });

            modelBuilder.Entity("WebThuCung.Models.Category", b =>
                {
                    b.Property<string>("idCategory")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("nameCategory")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("idCategory");

                    b.ToTable("Category");
                });

            modelBuilder.Entity("WebThuCung.Models.City", b =>
                {
                    b.Property<string>("idCity")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("idCountry")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("nameCity")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("idCity");

                    b.HasIndex("idCountry");

                    b.ToTable("City");
                });

            modelBuilder.Entity("WebThuCung.Models.Color", b =>
                {
                    b.Property<string>("idColor")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("nameColor")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("idColor");

                    b.ToTable("Color");
                });

            modelBuilder.Entity("WebThuCung.Models.Country", b =>
                {
                    b.Property<string>("idCountry")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("nameCountry")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("idCountry");

                    b.ToTable("Country");
                });

            modelBuilder.Entity("WebThuCung.Models.Customer", b =>
                {
                    b.Property<int>("idCustomer")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("idCustomer"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("OtpCode")
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)");

                    b.Property<DateTime?>("OtpExpiryTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<DateTime>("createdAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("dateBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("idCity")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("idCountry")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("idDistrict")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("idWard")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("nameCustomer")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("passwordCustomer")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("userCustomer")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("idCustomer");

                    b.HasIndex("idCity");

                    b.HasIndex("idCountry");

                    b.HasIndex("idDistrict");

                    b.HasIndex("idWard");

                    b.ToTable("Customer");
                });

            modelBuilder.Entity("WebThuCung.Models.DetailOrder", b =>
                {
                    b.Property<int>("IdDetailOrder")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdDetailOrder"));

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("idOrder")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("idProduct")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("nameColor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("nameSize")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("totalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("IdDetailOrder");

                    b.HasIndex("idOrder");

                    b.HasIndex("idProduct");

                    b.ToTable("DetailOrder");
                });

            modelBuilder.Entity("WebThuCung.Models.DetailVoteWarehouse", b =>
                {
                    b.Property<string>("idVotewarehouse")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnOrder(0);

                    b.Property<string>("idProduct")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnOrder(1);

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("purchasePrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("totalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("idVotewarehouse", "idProduct");

                    b.HasIndex("idProduct");

                    b.ToTable("DetailVoteWarehouse");
                });

            modelBuilder.Entity("WebThuCung.Models.Discount", b =>
                {
                    b.Property<string>("idDiscount")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("discountPercent")
                        .HasColumnType("int");

                    b.Property<string>("idProduct")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("idDiscount");

                    b.HasIndex("idProduct");

                    b.ToTable("Discount");
                });

            modelBuilder.Entity("WebThuCung.Models.District", b =>
                {
                    b.Property<string>("idDistrict")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("idCity")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("nameDistrict")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("idDistrict");

                    b.HasIndex("idCity");

                    b.ToTable("District");
                });

            modelBuilder.Entity("WebThuCung.Models.ImageProduct", b =>
                {
                    b.Property<string>("idImageProduct")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("idProduct")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("idImageProduct");

                    b.HasIndex("idProduct");

                    b.ToTable("ImageProduct");
                });

            modelBuilder.Entity("WebThuCung.Models.Order", b =>
                {
                    b.Property<string>("idOrder")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("dateFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("dateTo")
                        .HasColumnType("datetime2");

                    b.Property<int>("idCustomer")
                        .HasColumnType("int");

                    b.Property<int?>("statusOrder")
                        .HasColumnType("int");

                    b.Property<int?>("statusPay")
                        .HasColumnType("int");

                    b.Property<decimal?>("totalOrder")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("idOrder");

                    b.HasIndex("idCustomer");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("WebThuCung.Models.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("QRCodeUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("idTransaction")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Payment");
                });

            modelBuilder.Entity("WebThuCung.Models.Pet", b =>
                {
                    b.Property<string>("idPet")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("namePet")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("idPet");

                    b.ToTable("Pet");
                });

            modelBuilder.Entity("WebThuCung.Models.Product", b =>
                {
                    b.Property<string>("idProduct")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("idBranch")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("idCategory")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("idPet")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("nameProduct")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<decimal>("sellPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("idProduct");

                    b.HasIndex("idBranch");

                    b.HasIndex("idCategory");

                    b.HasIndex("idPet");

                    b.ToTable("Product");
                });

            modelBuilder.Entity("WebThuCung.Models.ProductColor", b =>
                {
                    b.Property<string>("idColor")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnOrder(0);

                    b.Property<string>("idProduct")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnOrder(1);

                    b.HasKey("idColor", "idProduct");

                    b.HasIndex("idProduct");

                    b.ToTable("ProductColor");
                });

            modelBuilder.Entity("WebThuCung.Models.ProductSize", b =>
                {
                    b.Property<string>("idSize")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnOrder(0);

                    b.Property<string>("idProduct")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnOrder(1);

                    b.HasKey("idSize", "idProduct");

                    b.HasIndex("idProduct");

                    b.ToTable("ProductSIze");
                });

            modelBuilder.Entity("WebThuCung.Models.Role", b =>
                {
                    b.Property<string>("idRole")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("idRole");

                    b.ToTable("Role");
                });

            modelBuilder.Entity("WebThuCung.Models.SaveProduct", b =>
                {
                    b.Property<string>("idProduct")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnOrder(1);

                    b.Property<int>("idCustomer")
                        .HasColumnType("int")
                        .HasColumnOrder(2);

                    b.Property<DateTime>("SavedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("idProduct", "idCustomer");

                    b.HasIndex("idCustomer");

                    b.ToTable("SaveProduct");
                });

            modelBuilder.Entity("WebThuCung.Models.Shipper", b =>
                {
                    b.Property<string>("idShipper")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Avatar")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<string>("idRole")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("passwordShipper")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("userShipper")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("idShipper");

                    b.HasIndex("idRole");

                    b.ToTable("Shipper");
                });

            modelBuilder.Entity("WebThuCung.Models.ShipperOrder", b =>
                {
                    b.Property<int>("idShipperOrder")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("idShipperOrder"));

                    b.Property<DateTime>("AssignedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ShippingStatus")
                        .HasColumnType("int");

                    b.Property<string>("idOrder")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("idShipper")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("idShipperOrder");

                    b.HasIndex("idOrder");

                    b.HasIndex("idShipper");

                    b.ToTable("ShipperOrder");
                });

            modelBuilder.Entity("WebThuCung.Models.Size", b =>
                {
                    b.Property<string>("idSize")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("nameSize")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("idSize");

                    b.ToTable("Size");
                });

            modelBuilder.Entity("WebThuCung.Models.Supplier", b =>
                {
                    b.Property<string>("idSupplier")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<string>("nameSupplier")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("idSupplier");

                    b.ToTable("Supplier");
                });

            modelBuilder.Entity("WebThuCung.Models.Transaction", b =>
                {
                    b.Property<int>("idTransaction")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("idTransaction"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<decimal?>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("cpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("createdDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("idCustomer")
                        .HasColumnType("int");

                    b.Property<string>("idOrder")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("nameCustomer")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("phoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("shippingAddress")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("idTransaction");

                    b.HasIndex("idCustomer");

                    b.HasIndex("idOrder");

                    b.ToTable("Transaction");
                });

            modelBuilder.Entity("WebThuCung.Models.VoteWarehouse", b =>
                {
                    b.Property<string>("idVotewarehouse")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("dateEntry")
                        .HasColumnType("datetime2");

                    b.Property<string>("idSupplier")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal?>("totalVoteWarehouse")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("idVotewarehouse");

                    b.HasIndex("idSupplier");

                    b.ToTable("VoteWarehouse");
                });

            modelBuilder.Entity("WebThuCung.Models.Ward", b =>
                {
                    b.Property<string>("idWard")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("idDistrict")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("nameWard")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("idWard");

                    b.HasIndex("idDistrict");

                    b.ToTable("Ward");
                });

            modelBuilder.Entity("WebThuCung.Models.Admin", b =>
                {
                    b.HasOne("WebThuCung.Models.Role", "Role")
                        .WithMany("Admins")
                        .HasForeignKey("idRole")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("WebThuCung.Models.City", b =>
                {
                    b.HasOne("WebThuCung.Models.Country", "Country")
                        .WithMany("Cities")
                        .HasForeignKey("idCountry")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("WebThuCung.Models.Customer", b =>
                {
                    b.HasOne("WebThuCung.Models.City", "City")
                        .WithMany("Customers")
                        .HasForeignKey("idCity")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebThuCung.Models.Country", "Country")
                        .WithMany("Customers")
                        .HasForeignKey("idCountry")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebThuCung.Models.District", "District")
                        .WithMany("Customers")
                        .HasForeignKey("idDistrict")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebThuCung.Models.Ward", "Ward")
                        .WithMany("Customers")
                        .HasForeignKey("idWard")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("Country");

                    b.Navigation("District");

                    b.Navigation("Ward");
                });

            modelBuilder.Entity("WebThuCung.Models.DetailOrder", b =>
                {
                    b.HasOne("WebThuCung.Models.Order", "Order")
                        .WithMany("DetailOrders")
                        .HasForeignKey("idOrder")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebThuCung.Models.Product", "Product")
                        .WithMany("DetailOrders")
                        .HasForeignKey("idProduct")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("WebThuCung.Models.DetailVoteWarehouse", b =>
                {
                    b.HasOne("WebThuCung.Models.Product", "Product")
                        .WithMany("DetailVoteWarehouses")
                        .HasForeignKey("idProduct")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebThuCung.Models.VoteWarehouse", "VoteWarehouse")
                        .WithMany("DetailVoteWarehouses")
                        .HasForeignKey("idVotewarehouse")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("VoteWarehouse");
                });

            modelBuilder.Entity("WebThuCung.Models.Discount", b =>
                {
                    b.HasOne("WebThuCung.Models.Product", "Product")
                        .WithMany("Discounts")
                        .HasForeignKey("idProduct")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("WebThuCung.Models.District", b =>
                {
                    b.HasOne("WebThuCung.Models.City", "City")
                        .WithMany("Districts")
                        .HasForeignKey("idCity")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("WebThuCung.Models.ImageProduct", b =>
                {
                    b.HasOne("WebThuCung.Models.Product", "Product")
                        .WithMany("ImageProducts")
                        .HasForeignKey("idProduct")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("WebThuCung.Models.Order", b =>
                {
                    b.HasOne("WebThuCung.Models.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("idCustomer")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("WebThuCung.Models.Product", b =>
                {
                    b.HasOne("WebThuCung.Models.Branch", "Branch")
                        .WithMany("Products")
                        .HasForeignKey("idBranch")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebThuCung.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("idCategory")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebThuCung.Models.Pet", "Pet")
                        .WithMany("Products")
                        .HasForeignKey("idPet")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Branch");

                    b.Navigation("Category");

                    b.Navigation("Pet");
                });

            modelBuilder.Entity("WebThuCung.Models.ProductColor", b =>
                {
                    b.HasOne("WebThuCung.Models.Color", "Color")
                        .WithMany("ProductColors")
                        .HasForeignKey("idColor")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebThuCung.Models.Product", "Product")
                        .WithMany("ProductColors")
                        .HasForeignKey("idProduct")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Color");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("WebThuCung.Models.ProductSize", b =>
                {
                    b.HasOne("WebThuCung.Models.Product", "Product")
                        .WithMany("ProductSizes")
                        .HasForeignKey("idProduct")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebThuCung.Models.Size", "Size")
                        .WithMany("ProductSizess")
                        .HasForeignKey("idSize")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Size");
                });

            modelBuilder.Entity("WebThuCung.Models.SaveProduct", b =>
                {
                    b.HasOne("WebThuCung.Models.Customer", "Customer")
                        .WithMany("SaveProducts")
                        .HasForeignKey("idCustomer")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebThuCung.Models.Product", "Product")
                        .WithMany("SaveProducts")
                        .HasForeignKey("idProduct")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("WebThuCung.Models.Shipper", b =>
                {
                    b.HasOne("WebThuCung.Models.Role", "Role")
                        .WithMany()
                        .HasForeignKey("idRole")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("WebThuCung.Models.ShipperOrder", b =>
                {
                    b.HasOne("WebThuCung.Models.Order", "Order")
                        .WithMany("ShipperOrders")
                        .HasForeignKey("idOrder")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebThuCung.Models.Shipper", "Shipper")
                        .WithMany("ShipperOrders")
                        .HasForeignKey("idShipper")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Shipper");
                });

            modelBuilder.Entity("WebThuCung.Models.Transaction", b =>
                {
                    b.HasOne("WebThuCung.Models.Customer", "Customer")
                        .WithMany("Transactions")
                        .HasForeignKey("idCustomer")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebThuCung.Models.Order", "Order")
                        .WithMany("Transactions")
                        .HasForeignKey("idOrder")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("WebThuCung.Models.VoteWarehouse", b =>
                {
                    b.HasOne("WebThuCung.Models.Supplier", "Supplier")
                        .WithMany("VoteWarehouses")
                        .HasForeignKey("idSupplier")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("WebThuCung.Models.Ward", b =>
                {
                    b.HasOne("WebThuCung.Models.District", "District")
                        .WithMany("Wards")
                        .HasForeignKey("idDistrict")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("District");
                });

            modelBuilder.Entity("WebThuCung.Models.Branch", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("WebThuCung.Models.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("WebThuCung.Models.City", b =>
                {
                    b.Navigation("Customers");

                    b.Navigation("Districts");
                });

            modelBuilder.Entity("WebThuCung.Models.Color", b =>
                {
                    b.Navigation("ProductColors");
                });

            modelBuilder.Entity("WebThuCung.Models.Country", b =>
                {
                    b.Navigation("Cities");

                    b.Navigation("Customers");
                });

            modelBuilder.Entity("WebThuCung.Models.Customer", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("SaveProducts");

                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("WebThuCung.Models.District", b =>
                {
                    b.Navigation("Customers");

                    b.Navigation("Wards");
                });

            modelBuilder.Entity("WebThuCung.Models.Order", b =>
                {
                    b.Navigation("DetailOrders");

                    b.Navigation("ShipperOrders");

                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("WebThuCung.Models.Pet", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("WebThuCung.Models.Product", b =>
                {
                    b.Navigation("DetailOrders");

                    b.Navigation("DetailVoteWarehouses");

                    b.Navigation("Discounts");

                    b.Navigation("ImageProducts");

                    b.Navigation("ProductColors");

                    b.Navigation("ProductSizes");

                    b.Navigation("SaveProducts");
                });

            modelBuilder.Entity("WebThuCung.Models.Role", b =>
                {
                    b.Navigation("Admins");
                });

            modelBuilder.Entity("WebThuCung.Models.Shipper", b =>
                {
                    b.Navigation("ShipperOrders");
                });

            modelBuilder.Entity("WebThuCung.Models.Size", b =>
                {
                    b.Navigation("ProductSizess");
                });

            modelBuilder.Entity("WebThuCung.Models.Supplier", b =>
                {
                    b.Navigation("VoteWarehouses");
                });

            modelBuilder.Entity("WebThuCung.Models.VoteWarehouse", b =>
                {
                    b.Navigation("DetailVoteWarehouses");
                });

            modelBuilder.Entity("WebThuCung.Models.Ward", b =>
                {
                    b.Navigation("Customers");
                });
#pragma warning restore 612, 618
        }
    }
}
